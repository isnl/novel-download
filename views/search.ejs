<!DOCTYPE html>
<html>
<head>
  <title><%= title %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- 预加载 UnoCSS -->
  <link rel="preload" href="https://cdn.jsdelivr.net/npm/@unocss/runtime/uno.global.js" as="script">
  <!-- 移除隐藏内容的样式 -->
  <script src="https://cdn.jsdelivr.net/npm/@unocss/runtime/uno.global.js" defer></script>
  <link rel="stylesheet" href="/stylesheets/reset.css">
  <style>
    .search-input {
      background: white;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .search-input:focus {
      box-shadow: 0 4px 6px rgba(59, 130, 246, 0.1);
    }

    .search-button {
      background: #3b82f6;
      font-weight: 500;
      letter-spacing: 0.025em;
    }

    .search-button:hover {
      background: #2563eb;
    }

    .search-button:active {
      transform: translateY(1px);
    }

    .result-card {
      border: 1px solid #e5e7eb;
      transition: all 0.2s ease;
    }

    .result-card:hover {
      border-color: #3b82f6;
      transform: translateY(-1px);
    }

    .tab-button {
      position: relative;
      transition: all 0.2s ease;
    }

    .tab-button::after {
      content: '';
      position: absolute;
      bottom: -2px;
      left: 0;
      width: 100%;
      height: 2px;
      background-color: #3b82f6;
      transform: scaleX(0);
      transition: transform 0.2s ease;
    }

    .tab-button.active {
      color: #3b82f6;
    }

    .tab-button.active::after {
      transform: scaleX(1);
    }

    .tab-content {
      display: none;
    }

    .tab-content.active {
      display: block;
    }

    /* 添加关键渲染路径的样式 */
    body {
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 2rem 0;
      background-color: #f9fafb;
    }
    .container {
      width: 100%;
      max-width: 64rem;
      padding: 0 1rem;
    }
    
    /* 下载按钮样式 */
    .download-button {
      background: #10b981;
      font-weight: 500;
      letter-spacing: 0.025em;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .download-button:hover {
      background: #059669;
    }

    .download-button:active {
      transform: translateY(1px);
    }
    
    /* 下载选项弹窗 */
    .download-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    }
    
    .download-modal.active {
      opacity: 1;
      visibility: visible;
    }
    
    .download-modal-content {
      background: white;
      border-radius: 0.5rem;
      padding: 1.5rem;
      width: 90%;
      max-width: 28rem;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
      transform: translateY(-20px);
      transition: all 0.3s ease;
    }
    
    .download-modal.active .download-modal-content {
      transform: translateY(0);
    }
    
    .checkbox-item {
      display: flex;
      align-items: center;
      margin-bottom: 0.75rem;
    }
    
    .checkbox-item input[type="checkbox"] {
      width: auto;
      margin-right: 0.5rem;
    }
    
    /* 加载动画 */
    .loading-spinner {
      display: inline-block;
      width: 1.5rem;
      height: 1.5rem;
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: white;
      animation: spin 1s ease-in-out infinite;
      margin-right: 0.5rem;
      display: none;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    /* 内容加载中样式 */
    .content-loading {
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 2rem 0;
    }
    
    .content-loading-spinner {
      width: 2rem;
      height: 2rem;
      border: 3px solid rgba(59, 130, 246, 0.2);
      border-radius: 50%;
      border-top-color: #3b82f6;
      animation: spin 1s ease-in-out infinite;
      margin-right: 0.75rem;
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- 搜索区域 -->
    <form action="/search" method="GET" class="w-full flex flex-col items-center mb-8">
      <div class="w-full max-w-2xl flex gap-2">
        <input 
          type="text" 
          name="q" 
          value="<%= searchQuery %>"
          placeholder="请输入搜索内容" 
          class="search-input flex-1 px-4 py-3 rounded-lg"
        >
        <input type="hidden" name="source" value="<%= activeSource %>">
        <button 
          type="submit" 
          class="search-button px-6 py-3 text-white rounded-lg transition-all duration-200"
        >
          搜索
        </button>
      </div>
    </form>

    <!-- 搜索结果区域 -->
    <div class="w-full">
      <% if (searchQuery) { %>
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-xl font-semibold text-gray-700">搜索结果：<span class="text-blue-600"><%= searchQuery %></span></h2>
        </div>
        
        <!-- 书源 Tab 切换 -->
        <div class="border-b border-gray-200 mb-6">
          <div class="flex gap-8">
            <% sources.forEach(source => { %>
              <a 
                href="#<%= source.id %>"
                data-source="<%= source.id %>"
                class="tab-button <%= activeSource === source.id ? 'active' : '' %> pb-2 px-1 text-gray-600"
              >
                <%= source.name %>
              </a>
            <% }); %>
          </div>
        </div>

        <!-- 搜索结果列表 -->
        <% sources.forEach(source => { %>
          <div id="<%= source.id %>" class="tab-content <%= activeSource === source.id ? 'active' : '' %> space-y-6">
            <div class="content-loading" id="loading-<%= source.id %>">
              <div class="content-loading-spinner"></div>
              <span class="text-gray-600">正在加载内容...</span>
            </div>
            <div id="content-<%= source.id %>" style="display: none;"></div>
          </div>
        <% }); %>

      <% } else { %>
        <p class="text-center text-gray-500">请输入搜索关键词</p>
      <% } %>
    </div>
  </div>
  
  <!-- 下载选项弹窗 -->
  <div class="download-modal" id="downloadModal">
    <div class="download-modal-content">
      <h3 class="text-xl font-semibold mb-4 text-gray-800">选择下载格式</h3>
      
      <div class="mb-4">
        <div class="checkbox-item">
          <input type="checkbox" id="txt" value="txt" checked>
          <label for="txt">TXT 格式</label>
        </div>
        <div class="checkbox-item">
          <input type="checkbox" id="epub" value="epub">
          <label for="epub">EPUB 格式</label>
        </div>
        <div class="checkbox-item">
          <input type="checkbox" id="mobi" value="mobi">
          <label for="mobi">MOBI 格式</label>
        </div>
        <div class="checkbox-item">
          <input type="checkbox" id="pdf" value="pdf">
          <label for="pdf">PDF 格式</label>
        </div>
      </div>
      
      <!-- 移除书源和书籍选择部分 -->
      <input type="hidden" id="sourceSelect">
      <input type="hidden" id="bookSelect">
      
      <div class="flex justify-end gap-2">
        <button 
          id="cancelDownload" 
          class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
        >
          取消
        </button>
        <button 
          id="confirmDownload" 
          class="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600"
        >
          <span class="loading-spinner" id="confirmSpinner"></span>
          <span>确认下载</span>
        </button>
      </div>
    </div>
  </div>
  
  <script>
    // 异步加载内容
    document.addEventListener('DOMContentLoaded', () => {
      const searchQuery = '<%= searchQuery %>';
      const activeSource = '<%= activeSource %>';
      
      if (searchQuery) {
        // 使用 setTimeout 延迟加载内容，确保页面先渲染
        setTimeout(() => {
          <% sources.forEach(source => { %>
            loadTabContent('<%= source.id %>', searchQuery);
          <% }); %>
        }, 100);
        
        // 标签切换功能
        const tabButtons = document.querySelectorAll('.tab-button');
        const tabContents = document.querySelectorAll('.tab-content');
        
        tabButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            e.preventDefault();
            
            const sourceId = button.getAttribute('data-source');
            
            // 更新 URL，但不刷新页面
            const url = new URL(window.location.href);
            url.searchParams.set('source', sourceId);
            window.history.pushState({}, '', url);
            
            // 更新激活状态
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));
            
            button.classList.add('active');
            document.getElementById(sourceId).classList.add('active');
          });
        });
      }
      
      // 下载按钮功能
      const downloadModal = document.getElementById('downloadModal');
      const cancelDownload = document.getElementById('cancelDownload');
      const confirmDownload = document.getElementById('confirmDownload');
      const confirmSpinner = document.getElementById('confirmSpinner');
      const sourceSelect = document.getElementById('sourceSelect');
      const bookSelect = document.getElementById('bookSelect');
      
      // 关闭弹窗
      cancelDownload.addEventListener('click', () => {
        downloadModal.classList.remove('active');
      });
      
      // 点击弹窗外部关闭
      downloadModal.addEventListener('click', (e) => {
        if (e.target === downloadModal) {
          downloadModal.classList.remove('active');
        }
      });
      
      // 书源切换时更新书籍列表
      sourceSelect.addEventListener('change', () => {
        updateBookSelect(sourceSelect.value);
      });
      
      // 确认下载
      confirmDownload.addEventListener('click', async () => {
        // 获取选中的格式
        const formats = [];
        document.querySelectorAll('input[type="checkbox"]:checked').forEach(checkbox => {
          formats.push(checkbox.value);
        });
        
        if (formats.length === 0) {
          alert('请至少选择一种下载格式');
          return;
        }
        
        // 获取选中的书源和书籍
        const source = sourceSelect.value;
        const bookId = bookSelect.value;
        
        if (!bookId) {
          alert('请选择要下载的书籍');
          return;
        }
        
        // 显示加载动画
        confirmSpinner.style.display = 'inline-block';
        confirmDownload.disabled = true;
        
        try {
          // 调用下载接口
          const response = await fetch('/download', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              formats,
              source,
              bookId
            })
          });
          
          if (response.ok) {
            const result = await response.json();
            alert(`下载成功！文件将保存在：${result.path}`);
            downloadModal.classList.remove('active');
          } else {
            throw new Error('下载失败');
          }
        } catch (error) {
          alert('下载失败：' + error.message);
        } finally {
          // 隐藏加载动画
          confirmSpinner.style.display = 'none';
          confirmDownload.disabled = false;
        }
      });
    });
    
    // 修改 UnoCSS 加载策略
    document.addEventListener('DOMContentLoaded', () => {
      // 立即显示页面内容，不等待 UnoCSS
      document.body.style.visibility = 'visible';
    });
    
    // 加载标签内容
    async function loadTabContent(sourceId, query) {
      try {
        const response = await fetch(`/search/api?q=${encodeURIComponent(query)}&source=${sourceId}`);
        if (!response.ok) throw new Error('加载失败');
        
        const data = await response.json();
        const contentElement = document.getElementById(`content-${sourceId}`);
        const loadingElement = document.getElementById(`loading-${sourceId}`);
        
        if (data.books.length === 0) {
          contentElement.innerHTML = '<p class="text-center text-gray-500 py-8">暂无搜索结果</p>';
        } else {
          let html = '';
          data.books.forEach(book => {
            html += `
              <div class="result-card bg-white p-6 rounded-lg mb-4" data-book-id="${book.id || ''}" data-book-title="${book.title}">
                <div class="flex items-start gap-4">
                  <div class="w-20 h-28 bg-gray-100 rounded flex-shrink-0">
                    ${book.cover ? `<img src="${book.cover}" alt="${book.title}" class="w-full h-full object-cover rounded">` : ''}
                  </div>
                  <div class="flex-1">
                    <h3 class="text-lg font-medium text-gray-800 mb-2">${book.title}</h3>
                    <p class="text-sm text-gray-500 mb-1">作者：${book.author}</p>
                    <p class="text-sm text-gray-500 mb-3">
                      ${book.wordCount ? `${book.wordCount} |` : ''}
                      ${book.status ? book.status : ''}
                    </p>
                    ${book.description ? `<p class="text-gray-600 text-sm line-clamp-2">${book.description}</p>` : ''}
                    <div class="mt-3 flex items-center gap-4">
                      ${book.latestChapter ? `<span class="text-gray-500 text-sm">最新：${book.latestChapter}</span>` : ''}
                      <a href="${book.url}" class="text-blue-500 hover:text-blue-600 text-sm inline-flex items-center">
                        立即阅读
                        <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                        </svg>
                      </a>
                      <button 
                        class="download-button px-3 py-1 text-white rounded-lg transition-all duration-200 text-sm"
                        onclick="openDownloadModal('${sourceId}', '${book.id || book.url}', '${book.title}')"
                      >
                        下载电子书
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            `;
          });
          contentElement.innerHTML = html;
        }
        
        // 隐藏加载中，显示内容
        loadingElement.style.display = 'none';
        contentElement.style.display = 'block';
      } catch (error) {
        console.error(`加载 ${sourceId} 内容失败:`, error);
        const contentElement = document.getElementById(`content-${sourceId}`);
        const loadingElement = document.getElementById(`loading-${sourceId}`);
        
        contentElement.innerHTML = '<p class="text-center text-red-500 py-8">加载失败，请重试</p>';
        loadingElement.style.display = 'none';
        contentElement.style.display = 'block';
      }
    }
    
    // 添加打开下载弹窗的函数
    function openDownloadModal(sourceId, bookId, bookTitle) {
      const downloadModal = document.getElementById('downloadModal');
      const sourceSelect = document.getElementById('sourceSelect');
      const bookSelect = document.getElementById('bookSelect');
      
      // 设置隐藏字段的值
      sourceSelect.value = sourceId;
      bookSelect.value = bookId;
      
      // 更新弹窗标题，显示书籍名称
      const modalTitle = downloadModal.querySelector('h3');
      if (modalTitle) {
        modalTitle.textContent = `下载《${bookTitle}》`;
      }
      
      // 显示弹窗
      downloadModal.classList.add('active');
    }
    
    // 更新书籍选择下拉框
    async function updateBookSelect(sourceId, selectedBookId = null) {
      const bookSelect = document.getElementById('bookSelect');
      bookSelect.innerHTML = '<option value="">加载中...</option>';
      
      try {
        const query = '<%= searchQuery %>';
        const response = await fetch(`/search/api?q=${encodeURIComponent(query)}&source=${sourceId}`);
        if (!response.ok) throw new Error('加载失败');
        
        const data = await response.json();
        
        if (data.books.length === 0) {
          bookSelect.innerHTML = '<option value="">没有可下载的书籍</option>';
        } else {
          let options = '';
          data.books.forEach(book => {
            const bookId = book.id || book.url;
            const selected = selectedBookId && bookId === selectedBookId ? 'selected' : '';
            options += `<option value="${bookId}" ${selected}>${book.title} - ${book.author}</option>`;
          });
          bookSelect.innerHTML = options;
        }
      } catch (error) {
        console.error('加载书籍列表失败:', error);
        bookSelect.innerHTML = '<option value="">加载失败</option>';
      }
    }
  </script>
</body>
</html>